
#############################################################################################
################################ Set some global parameters  ################################
#############################################################################################
apiVersion: "security.istio.io/v1beta1"
kind: "PeerAuthentication"
metadata:
  name: "default"
  namespace: "istio-system"
spec:
  mtls:
    mode: STRICT
---
apiVersion: v1
kind: Namespace
metadata:
  name: space-cloud
  labels:
    istio-injection: enabled
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: deny-all
  namespace: default
spec:
  {}
---
#############################################################################################
############################### Create cluster role bindings  ###############################
#############################################################################################
apiVersion: v1
kind: ServiceAccount
metadata:
  name: space-cloud-runner
  namespace: space-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: space-cloud-runner
  namespace: space-cloud
rules:
  - apiGroups: [""]
    resources: ["namespaces", "pods", "pods/log", "services", "configmaps", "secrets", "serviceaccounts"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups:
      - "extensions"
      - "apps"
    resources: ["deployments"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups:
      - "apps"
    resources: ["statefulsets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups:
      - "security.istio.io"
      - "networking.istio.io"
    resources: ["*"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups:
      - "keda.sh"
    resources: ["*"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups:
      - "rbac.authorization.k8s.io"
    resources: ["clusterroles", "roles", "clusterrolebindings", "rolebindings"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: ClusterRoleBinding
metadata:
  name: space-cloud-runner
subjects:
  - kind: ServiceAccount
    name: space-cloud-runner # Name is case sensitive
    namespace: space-cloud
roleRef:
  kind: ClusterRole
  name: space-cloud-runner
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: space-cloud-gateway
  namespace: space-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: space-cloud-gateway
  namespace: space-cloud
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: space-cloud-gateway
subjects:
  - kind: ServiceAccount
    name: space-cloud-gateway # Name is case sensitive
    namespace: space-cloud
roleRef:
  kind: ClusterRole
  name: space-cloud-gateway
  apiGroup: rbac.authorization.k8s.io
---
#############################################################################################
########################## Configure the istio side of the runner  ##########################
#############################################################################################
apiVersion: "security.istio.io/v1beta1"
kind: "PeerAuthentication"
metadata:
  name: "runner-auth"
  namespace: "space-cloud"
spec:
  selector:
    matchLabels:
      app: runner
  mtls:
    mode: STRICT
  portLevelMtls:
    4060:
      mode: PERMISSIVE
---
apiVersion: "security.istio.io/v1beta1"
kind: "AuthorizationPolicy"
metadata:
  name: "auth-runner"
  namespace: space-cloud
spec:
  selector:
    matchLabels:
      app: runner
  rules:
    - {}
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: "space-cloud-runner"
  namespace: space-cloud
spec:
  host: "runner.space-cloud.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: space-cloud-runner
  namespace: space-cloud
spec:
  hosts:
    - "runner.space-cloud.svc.cluster.local"
  http:
    - match:
        - port: 4050
      route:
        - destination:
            host: runner.space-cloud.svc.cluster.local
            port:
              number: 4050
      retries:
        attempts: 3
        perTryTimeout: 60s
    - match:
        - port: 4055
      route:
        - destination:
            host: runner.space-cloud.svc.cluster.local
            port:
              number: 4055
      retries:
        attempts: 1
        perTryTimeout: 30m
  tcp:
    - match:
        - port: 4060
      route:
        - destination:
            host: runner.space-cloud.svc.cluster.local
            port:
              number: 4060
---
#############################################################################################
################### Create the service and deployment objects for runner  ###################
#############################################################################################
apiVersion: v1
kind: Service
metadata:
  name: runner
  namespace: space-cloud
  labels:
    app: runner
    service: runner
spec:
  ports:
    - port: 4050
      name: http
    - port: 4055
      name: http-proxy
    - port: 4060
      name: grpc-keda
  selector:
    app: runner
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: runner
  namespace: space-cloud
  labels:
    app: runner
spec:
  replicas: 1
  selector:
    matchLabels:
      app: runner
  template:
    metadata:
      labels:
        app: runner
    spec:
      serviceAccountName: space-cloud-runner
      containers:
        - name: runner
          command: ["./app", "start"]
          image: spaceuptech/runner:0.20.0
          imagePullPolicy: IfNotPresent # IfNotPresent | Always
          env:
            - name: "LOG_LEVEL"
              value: "debug"
            - name: "LOG_FORMAT"
              value: "json"
            - name: "PROMETHEUS_ADDR"
              value: "http://prometheus.space-cloud.svc.cluster.local:9090"
            - name: "JWT_SECRET"
              value: "some-secret"
            - name: "CLUSTER_ID"
              value: "first-cluster"
          ports:
            - containerPort: 4050
            - containerPort: 4055
            - containerPort: 4060
          resources:
            requests:
              memory: "1024Mi"
              cpu: "500m"
---
#############################################################################################
########################## Configure the istio side of the gateway  #########################
#############################################################################################
apiVersion: "security.istio.io/v1beta1"
kind: "AuthorizationPolicy"
metadata:
  name: "auth-gateway"
  namespace: space-cloud
spec:
  selector:
    matchLabels:
      app: gateway
  rules:
    - {}
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: "space-cloud-gateway"
  namespace: space-cloud
spec:
  host: "gateway.space-cloud.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: space-cloud-gateway
  namespace: space-cloud
spec:
  hosts:
    - "gateway.space-cloud.svc.cluster.local"
  http:
    - match:
        - port: 4122
      route:
        - destination:
            host: "gateway.space-cloud.svc.cluster.local"
            port:
              number: 4122
      retries:
        attempts: 3
        perTryTimeout: 60s
    - match:
        - port: 4126
      route:
        - destination:
            host: "gateway.space-cloud.svc.cluster.local"
            port:
              number: 4126
      retries:
        attempts: 3
        perTryTimeout: 60s
---
#############################################################################################
################## Create the service and deployment objects for the gateway  ###############
#############################################################################################
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: sc-gateway
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
    - port:
        number: 443
        name: https
        protocol: HTTPS
      tls:
        mode: PASSTHROUGH
      hosts:
        - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: gateway
spec:
  hosts:
    - "*"
  gateways:
    - sc-gateway
  http:
    - route:
        - destination:
            port:
              number: 4122
            host: gateway.space-cloud.svc.cluster.local
  tls:
    - match:
        - port: 443
          sniHosts:
            - '*'
      route:
        - destination:
            port:
              number: 4126
            host: gateway.space-cloud.svc.cluster.local
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
  namespace: space-cloud
  labels:
    app: gateway
    service: gateway
spec:
  clusterIP: None
  ports:
    - targetPort: 4122
      port: 4122
      name: http
    - targetPort: 4126
      port: 4126
      name: https
  selector:
    app: gateway
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gateway
  namespace: space-cloud
  labels:
    app: gateway
spec:
  replicas: 2
  serviceName: gateway
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
        clusterId: first-cluster
    spec:
      serviceAccountName: space-cloud-gateway
      containers:
        - name: gateway
          command: ["./app", "run"]
          image: spaceuptech/gateway:0.20.0
          imagePullPolicy: IfNotPresent # IfNotPresent | Always
          env:
            - name: "NODE_ID"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: "RUNNER_ADDR"
              value: "runner.space-cloud.svc.cluster.local:4050"
            - name: "GOOGLE_APPLICATION_CREDENTIALS"
              value: "/root/.gcp/credentials.json"
            - name: "ADMIN_USER"
              value: "admin"
            - name: "ADMIN_PASS"
              value: "1234"
            - name: "ADMIN_SECRET"
              value: "some-secret"
            - name: "LOG_LEVEL"
              value: "debug"
            - name: "LOG_FORMAT"
              value: "json"
            - name: "STORE_TYPE"
              value: "kube"
            - name: "LETSENCRYPT_STORE"
              value: "kube"
            - name: "DEV"
              value: "true" # Turn this to false for production mode
            - name: "SSL_ENABLE"
              value: "true"
            - name: "CLUSTER_ID"
              value: "first-cluster"
          ports:
            - containerPort: 4122
            - containerPort: 4126
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: gateway
  namespace: space-cloud
  labels:
    app: gateway
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: gateway
  minReplicas: 1
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
