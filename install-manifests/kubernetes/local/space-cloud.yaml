
#############################################################################################
################################ Set some global parameters  ################################
#############################################################################################
apiVersion: "security.istio.io/v1beta1"
kind: "PeerAuthentication"
metadata:
  name: "default"
  namespace: "istio-system"
spec:
  mtls:
    mode: STRICT
---
apiVersion: v1
kind: Namespace
metadata:
  name: space-cloud
  labels:
    istio-injection: enabled
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: deny-all
  namespace: default
spec:
  {}
---
#############################################################################################
############################### Create cluster role bindings  ###############################
#############################################################################################
apiVersion: v1
kind: ServiceAccount
metadata:
  name: space-cloud-runner
  namespace: space-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: space-cloud-runner
  namespace: space-cloud
rules:
  - apiGroups: [""]
    resources: ["namespaces", "pods", "pods/log", "services", "configmaps", "secrets", "serviceaccounts"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups:
      - "extensions"
      - "apps"
    resources: ["deployments"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups:
    - "apps"
    resources: ["statefulsets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups:
    - "security.istio.io"
    - "networking.istio.io"
    resources: ["*"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: ClusterRoleBinding
metadata:
  name: space-cloud-runner
subjects:
  - kind: ServiceAccount
    name: space-cloud-runner # Name is case sensitive
    namespace: space-cloud
roleRef:
  kind: ClusterRole
  name: space-cloud-runner
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: space-cloud-gateway
  namespace: space-cloud
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: space-cloud-gateway
  namespace: space-cloud
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: space-cloud-gateway
subjects:
  - kind: ServiceAccount
    name: space-cloud-gateway # Name is case sensitive
    namespace: space-cloud
roleRef:
  kind: ClusterRole
  name: space-cloud-gateway
  apiGroup: rbac.authorization.k8s.io
---
#############################################################################################
########################## Configure the istio side of the runner  ##########################
#############################################################################################
apiVersion: "security.istio.io/v1beta1"
kind: "AuthorizationPolicy"
metadata:
  name: "auth-runner"
  namespace: space-cloud
spec:
  selector:
    matchLabels:
      app: runner
  rules:
    - {}
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: "space-cloud-runner"
  namespace: space-cloud
spec:
  host: "runner.space-cloud.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: space-cloud-runner
  namespace: space-cloud
spec:
  hosts:
    - "runner.space-cloud.svc.cluster.local"
  http:
    - route:
        - destination:
            host: runner.space-cloud.svc.cluster.local
            port:
              number: 4050
      retries:
        attempts: 3
        perTryTimeout: 60s
    - match:
        - port: 4052
      route:
        - destination:
            host: runner.space-cloud.svc.cluster.local
            port:
              number: 4052
      retries:
        attempts: 1
        perTryTimeout: 3m
---
#############################################################################################
################### Create the service and deployment objects for runner  ###################
#############################################################################################
apiVersion: v1
kind: Service
metadata:
  name: runner
  namespace: space-cloud
  labels:
    app: runner
    service: runner
spec:
  ports:
    - port: 4050
      name: http
    - port: 4055
      name: http-proxy
  selector:
    app: runner
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: runner
  namespace: space-cloud
  labels:
    app: runner
spec:
  replicas: 1
  selector:
    matchLabels:
      app: runner
  template:
    metadata:
      labels:
        app: runner
    spec:
      serviceAccountName: space-cloud-runner
      containers:
        - name: runner
          command: ["./app", "start"]
          image: spaceuptech/runner:0.19.2
          imagePullPolicy: IfNotPresent # IfNotPresent | Always
          env:
            - name: "LOG_LEVEL"
              value: "debug"
            - name: "ARTIFACT_ADDR"
              value: "store.space-cloud.svc.cluster.local:4122"
            - name: "JWT_SECRET"
              value: "some-secret"
            - name: "JWT_PROXY_SECRET"
              value: "some-proxy-secret"
            - name: "CLUSTER_ID"
              value: "first-cluster"
          ports:
            - containerPort: 4050
            - containerPort: 4055
---
#############################################################################################
########################## Configure the istio side of the gateway  #########################
#############################################################################################
apiVersion: "security.istio.io/v1beta1"
kind: "AuthorizationPolicy"
metadata:
  name: "auth-gateway"
  namespace: space-cloud
spec:
  selector:
    matchLabels:
      app: gateway
  rules:
    - {}
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: "space-cloud-gateway"
  namespace: space-cloud
spec:
  host: "gateway.space-cloud.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: space-cloud-gateway
  namespace: space-cloud
spec:
  hosts:
    - "gateway.space-cloud.svc.cluster.local"
  http:
    - match:
        - port: 4122
      route:
        - destination:
            host: "gateway.space-cloud.svc.cluster.local"
            port:
              number: 4122
      retries:
        attempts: 3
        perTryTimeout: 60s
    - match:
        - port: 4126
      route:
        - destination:
            host: "gateway.space-cloud.svc.cluster.local"
            port:
              number: 4126
      retries:
        attempts: 3
        perTryTimeout: 60s
---
#############################################################################################
################## Create the service and deployment objects for the gateway  ###############
#############################################################################################
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: sc-gateway
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
    - port:
        number: 443
        name: https
        protocol: HTTPS
      tls:
        mode: PASSTHROUGH
      hosts:
        - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: gateway
spec:
  hosts:
    - "*"
  gateways:
    - sc-gateway
  http:
    - route:
        - destination:
            port:
              number: 4122
            host: gateway.space-cloud.svc.cluster.local
  tls:
    - match:
        - port: 443
          sniHosts:
            - '*'
      route:
        - destination:
            port:
              number: 4126
            host: gateway.space-cloud.svc.cluster.local
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
  namespace: space-cloud
  labels:
    app: gateway
    service: gateway
spec:
  clusterIP: None
  ports:
    - targetPort: 4122
      port: 4122
      name: http
    - targetPort: 4126
      port: 4126
      name: https
  selector:
    app: gateway
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gateway
  namespace: space-cloud
  labels:
    app: gateway
spec:
  replicas: 1
  serviceName: gateway
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
        clusterId: first-cluster
    spec:
      serviceAccountName: space-cloud-gateway
      containers:
        - name: gateway
          command: ["./app", "run"]
          image: spaceuptech/gateway:0.19.2
          imagePullPolicy: IfNotPresent # IfNotPresent | Always
          env:
            - name: "NODE_ID"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: "RUNNER_ADDR"
              value: "runner.space-cloud.svc.cluster.local:4050"
            - name: "GOOGLE_APPLICATION_CREDENTIALS"
              value: "/root/.gcp/credentials.json"
            - name: "ADMIN_USER"
              value: "admin"
            - name: "ADMIN_PASS"
              value: "1234"
            - name: "ADMIN_SECRET"
              value: "some-secret"
            - name: "LOG_LEVEL"
              value: "debug"
            - name: "STORE_TYPE"
              value: "kube"
            - name: "LETSENCRYPT_STORE"
              value: "kube"
            - name: "DEV"
              value: "true" # Turn this to false for production mode
            - name: "SSL_ENABLE"
              value: "true"
            - name: "CLUSTER_ID"
              value: "first-cluster"
          ports:
            - containerPort: 4122
            - containerPort: 4126
---
#############################################################################################
################################# Config for Prometheus  ####################################
#############################################################################################
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: space-cloud
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
  namespace: space-cloud
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - ingresses
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  namespace: space-cloud
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: space-cloud
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: prometheus
  name: prometheus
  namespace: space-cloud
data:
  alerting_rules.yml: |
    {}
  alerts: |
    {}
  recording_rules.yml: |
    {}
  rules: |
    {}
  prometheus.yml: |
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s
    rule_files:
      - /etc/config/recording_rules.yml
      - /etc/config/alerting_rules.yml
      - /etc/config/rules
      - /etc/config/alerts
    scrape_configs:
      - job_name: prometheus
        static_configs:
          - targets:
              - localhost:9090
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-apiservers
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - action: keep
            regex: default;kubernetes;https
            source_labels:
              - __meta_kubernetes_namespace
              - __meta_kubernetes_service_name
              - __meta_kubernetes_endpoint_port_name
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-nodes
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - replacement: kubernetes.default.svc:443
            target_label: __address__
          - regex: (.+)
            replacement: /api/v1/nodes/$1/proxy/metrics
            source_labels:
              - __meta_kubernetes_node_name
            target_label: __metrics_path__
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-nodes-cadvisor
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - replacement: kubernetes.default.svc:443
            target_label: __address__
          - regex: (.+)
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
            source_labels:
              - __meta_kubernetes_node_name
            target_label: __metrics_path__
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
      - job_name: kubernetes-service-endpoints
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - action: keep
            regex: true
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scrape
          - action: replace
            regex: (https?)
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scheme
            target_label: __scheme__
          - action: replace
            regex: (.+)
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
              - __address__
              - __meta_kubernetes_service_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - action: replace
            source_labels:
              - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - action: replace
            source_labels:
              - __meta_kubernetes_service_name
            target_label: kubernetes_name
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_node_name
            target_label: kubernetes_node
      - job_name: kubernetes-service-endpoints-slow
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - action: keep
            regex: true
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
          - action: replace
            regex: (https?)
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_scheme
            target_label: __scheme__
          - action: replace
            regex: (.+)
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
              - __address__
              - __meta_kubernetes_service_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - action: replace
            source_labels:
              - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - action: replace
            source_labels:
              - __meta_kubernetes_service_name
            target_label: kubernetes_name
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_node_name
            target_label: kubernetes_node
        scrape_interval: 5m
        scrape_timeout: 30s
      - honor_labels: true
        job_name: prometheus-pushgateway
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - action: keep
            regex: pushgateway
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_probe
      - job_name: kubernetes-services
        kubernetes_sd_configs:
          - role: service
        metrics_path: /probe
        params:
          module:
            - http_2xx
        relabel_configs:
          - action: keep
            regex: true
            source_labels:
              - __meta_kubernetes_service_annotation_prometheus_io_probe
          - source_labels:
              - __address__
            target_label: __param_target
          - replacement: blackbox
            target_label: __address__
          - source_labels:
              - __param_target
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels:
              - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - source_labels:
              - __meta_kubernetes_service_name
            target_label: kubernetes_name
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - action: keep
            regex: true
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
          - action: replace
            regex: (.+)
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
              - __address__
              - __meta_kubernetes_pod_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            source_labels:
              - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_name
            target_label: kubernetes_pod_name
      - job_name: kubernetes-pods-slow
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - action: keep
            regex: true
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
          - action: replace
            regex: (.+)
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
            target_label: __metrics_path__
          - action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            source_labels:
              - __address__
              - __meta_kubernetes_pod_annotation_prometheus_io_port
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - action: replace
            source_labels:
              - __meta_kubernetes_namespace
            target_label: kubernetes_namespace
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_name
            target_label: kubernetes_pod_name

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: prometheus
    service: prometheus
  name: prometheus
  namespace: space-cloud
spec:
  ports:
    - name: http
      port: 9090
      protocol: TCP
      targetPort: 9090
  selector:
    app: prometheus
  sessionAffinity: None
  type: "ClusterIP"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: prometheus
  name: prometheus
  namespace: space-cloud
spec:
  selector:
    matchLabels:
      app: prometheus
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus-server-configmap-reload
          image: "jimmidyson/configmap-reload:v0.3.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
          resources:
            limits:
              cpu: 10m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 50Mi
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

        - name: prometheus-server
          image: "prom/prometheus:v2.19.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --storage.tsdb.retention.time=6h
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: prometheus
        - name: storage-volume
          emptyDir:
            {}