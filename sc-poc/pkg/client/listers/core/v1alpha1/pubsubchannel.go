/*
Copyright The Space Cloud Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/spacecloud-io/space-cloud/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PubsubChannelLister helps list PubsubChannels.
// All objects returned here must be treated as read-only.
type PubsubChannelLister interface {
	// List lists all PubsubChannels in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PubsubChannel, err error)
	// PubsubChannels returns an object that can list and get PubsubChannels.
	PubsubChannels(namespace string) PubsubChannelNamespaceLister
	PubsubChannelListerExpansion
}

// pubsubChannelLister implements the PubsubChannelLister interface.
type pubsubChannelLister struct {
	indexer cache.Indexer
}

// NewPubsubChannelLister returns a new PubsubChannelLister.
func NewPubsubChannelLister(indexer cache.Indexer) PubsubChannelLister {
	return &pubsubChannelLister{indexer: indexer}
}

// List lists all PubsubChannels in the indexer.
func (s *pubsubChannelLister) List(selector labels.Selector) (ret []*v1alpha1.PubsubChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PubsubChannel))
	})
	return ret, err
}

// PubsubChannels returns an object that can list and get PubsubChannels.
func (s *pubsubChannelLister) PubsubChannels(namespace string) PubsubChannelNamespaceLister {
	return pubsubChannelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PubsubChannelNamespaceLister helps list and get PubsubChannels.
// All objects returned here must be treated as read-only.
type PubsubChannelNamespaceLister interface {
	// List lists all PubsubChannels in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PubsubChannel, err error)
	// Get retrieves the PubsubChannel from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PubsubChannel, error)
	PubsubChannelNamespaceListerExpansion
}

// pubsubChannelNamespaceLister implements the PubsubChannelNamespaceLister
// interface.
type pubsubChannelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PubsubChannels in the indexer for a given namespace.
func (s pubsubChannelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PubsubChannel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PubsubChannel))
	})
	return ret, err
}

// Get retrieves the PubsubChannel from the indexer for a given namespace and name.
func (s pubsubChannelNamespaceLister) Get(name string) (*v1alpha1.PubsubChannel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pubsubchannel"), name)
	}
	return obj.(*v1alpha1.PubsubChannel), nil
}
