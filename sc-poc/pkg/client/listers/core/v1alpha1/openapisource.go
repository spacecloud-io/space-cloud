/*
Copyright The Space Cloud Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/spacecloud-io/space-cloud/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenAPISourceLister helps list OpenAPISources.
// All objects returned here must be treated as read-only.
type OpenAPISourceLister interface {
	// List lists all OpenAPISources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpenAPISource, err error)
	// OpenAPISources returns an object that can list and get OpenAPISources.
	OpenAPISources(namespace string) OpenAPISourceNamespaceLister
	OpenAPISourceListerExpansion
}

// openAPISourceLister implements the OpenAPISourceLister interface.
type openAPISourceLister struct {
	indexer cache.Indexer
}

// NewOpenAPISourceLister returns a new OpenAPISourceLister.
func NewOpenAPISourceLister(indexer cache.Indexer) OpenAPISourceLister {
	return &openAPISourceLister{indexer: indexer}
}

// List lists all OpenAPISources in the indexer.
func (s *openAPISourceLister) List(selector labels.Selector) (ret []*v1alpha1.OpenAPISource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenAPISource))
	})
	return ret, err
}

// OpenAPISources returns an object that can list and get OpenAPISources.
func (s *openAPISourceLister) OpenAPISources(namespace string) OpenAPISourceNamespaceLister {
	return openAPISourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpenAPISourceNamespaceLister helps list and get OpenAPISources.
// All objects returned here must be treated as read-only.
type OpenAPISourceNamespaceLister interface {
	// List lists all OpenAPISources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OpenAPISource, err error)
	// Get retrieves the OpenAPISource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OpenAPISource, error)
	OpenAPISourceNamespaceListerExpansion
}

// openAPISourceNamespaceLister implements the OpenAPISourceNamespaceLister
// interface.
type openAPISourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpenAPISources in the indexer for a given namespace.
func (s openAPISourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OpenAPISource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenAPISource))
	})
	return ret, err
}

// Get retrieves the OpenAPISource from the indexer for a given namespace and name.
func (s openAPISourceNamespaceLister) Get(name string) (*v1alpha1.OpenAPISource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("openapisource"), name)
	}
	return obj.(*v1alpha1.OpenAPISource), nil
}
