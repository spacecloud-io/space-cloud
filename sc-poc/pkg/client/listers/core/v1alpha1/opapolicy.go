/*
Copyright The Space Cloud Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/spacecloud-io/space-cloud/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OPAPolicyLister helps list OPAPolicies.
// All objects returned here must be treated as read-only.
type OPAPolicyLister interface {
	// List lists all OPAPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OPAPolicy, err error)
	// OPAPolicies returns an object that can list and get OPAPolicies.
	OPAPolicies(namespace string) OPAPolicyNamespaceLister
	OPAPolicyListerExpansion
}

// oPAPolicyLister implements the OPAPolicyLister interface.
type oPAPolicyLister struct {
	indexer cache.Indexer
}

// NewOPAPolicyLister returns a new OPAPolicyLister.
func NewOPAPolicyLister(indexer cache.Indexer) OPAPolicyLister {
	return &oPAPolicyLister{indexer: indexer}
}

// List lists all OPAPolicies in the indexer.
func (s *oPAPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.OPAPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OPAPolicy))
	})
	return ret, err
}

// OPAPolicies returns an object that can list and get OPAPolicies.
func (s *oPAPolicyLister) OPAPolicies(namespace string) OPAPolicyNamespaceLister {
	return oPAPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OPAPolicyNamespaceLister helps list and get OPAPolicies.
// All objects returned here must be treated as read-only.
type OPAPolicyNamespaceLister interface {
	// List lists all OPAPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OPAPolicy, err error)
	// Get retrieves the OPAPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OPAPolicy, error)
	OPAPolicyNamespaceListerExpansion
}

// oPAPolicyNamespaceLister implements the OPAPolicyNamespaceLister
// interface.
type oPAPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OPAPolicies in the indexer for a given namespace.
func (s oPAPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OPAPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OPAPolicy))
	})
	return ret, err
}

// Get retrieves the OPAPolicy from the indexer for a given namespace and name.
func (s oPAPolicyNamespaceLister) Get(name string) (*v1alpha1.OPAPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("opapolicy"), name)
	}
	return obj.(*v1alpha1.OPAPolicy), nil
}
