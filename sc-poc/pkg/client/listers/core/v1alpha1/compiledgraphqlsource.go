/*
Copyright The Space Cloud Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/spacecloud-io/space-cloud/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CompiledGraphqlSourceLister helps list CompiledGraphqlSources.
// All objects returned here must be treated as read-only.
type CompiledGraphqlSourceLister interface {
	// List lists all CompiledGraphqlSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CompiledGraphqlSource, err error)
	// CompiledGraphqlSources returns an object that can list and get CompiledGraphqlSources.
	CompiledGraphqlSources(namespace string) CompiledGraphqlSourceNamespaceLister
	CompiledGraphqlSourceListerExpansion
}

// compiledGraphqlSourceLister implements the CompiledGraphqlSourceLister interface.
type compiledGraphqlSourceLister struct {
	indexer cache.Indexer
}

// NewCompiledGraphqlSourceLister returns a new CompiledGraphqlSourceLister.
func NewCompiledGraphqlSourceLister(indexer cache.Indexer) CompiledGraphqlSourceLister {
	return &compiledGraphqlSourceLister{indexer: indexer}
}

// List lists all CompiledGraphqlSources in the indexer.
func (s *compiledGraphqlSourceLister) List(selector labels.Selector) (ret []*v1alpha1.CompiledGraphqlSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CompiledGraphqlSource))
	})
	return ret, err
}

// CompiledGraphqlSources returns an object that can list and get CompiledGraphqlSources.
func (s *compiledGraphqlSourceLister) CompiledGraphqlSources(namespace string) CompiledGraphqlSourceNamespaceLister {
	return compiledGraphqlSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CompiledGraphqlSourceNamespaceLister helps list and get CompiledGraphqlSources.
// All objects returned here must be treated as read-only.
type CompiledGraphqlSourceNamespaceLister interface {
	// List lists all CompiledGraphqlSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CompiledGraphqlSource, err error)
	// Get retrieves the CompiledGraphqlSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CompiledGraphqlSource, error)
	CompiledGraphqlSourceNamespaceListerExpansion
}

// compiledGraphqlSourceNamespaceLister implements the CompiledGraphqlSourceNamespaceLister
// interface.
type compiledGraphqlSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CompiledGraphqlSources in the indexer for a given namespace.
func (s compiledGraphqlSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CompiledGraphqlSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CompiledGraphqlSource))
	})
	return ret, err
}

// Get retrieves the CompiledGraphqlSource from the indexer for a given namespace and name.
func (s compiledGraphqlSourceNamespaceLister) Get(name string) (*v1alpha1.CompiledGraphqlSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("compiledgraphqlsource"), name)
	}
	return obj.(*v1alpha1.CompiledGraphqlSource), nil
}
