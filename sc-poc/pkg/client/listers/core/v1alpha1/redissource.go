/*
Copyright The Space Cloud Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/spacecloud-io/space-cloud/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RedisSourceLister helps list RedisSources.
// All objects returned here must be treated as read-only.
type RedisSourceLister interface {
	// List lists all RedisSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedisSource, err error)
	// RedisSources returns an object that can list and get RedisSources.
	RedisSources(namespace string) RedisSourceNamespaceLister
	RedisSourceListerExpansion
}

// redisSourceLister implements the RedisSourceLister interface.
type redisSourceLister struct {
	indexer cache.Indexer
}

// NewRedisSourceLister returns a new RedisSourceLister.
func NewRedisSourceLister(indexer cache.Indexer) RedisSourceLister {
	return &redisSourceLister{indexer: indexer}
}

// List lists all RedisSources in the indexer.
func (s *redisSourceLister) List(selector labels.Selector) (ret []*v1alpha1.RedisSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisSource))
	})
	return ret, err
}

// RedisSources returns an object that can list and get RedisSources.
func (s *redisSourceLister) RedisSources(namespace string) RedisSourceNamespaceLister {
	return redisSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RedisSourceNamespaceLister helps list and get RedisSources.
// All objects returned here must be treated as read-only.
type RedisSourceNamespaceLister interface {
	// List lists all RedisSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RedisSource, err error)
	// Get retrieves the RedisSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RedisSource, error)
	RedisSourceNamespaceListerExpansion
}

// redisSourceNamespaceLister implements the RedisSourceNamespaceLister
// interface.
type redisSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RedisSources in the indexer for a given namespace.
func (s redisSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RedisSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RedisSource))
	})
	return ret, err
}

// Get retrieves the RedisSource from the indexer for a given namespace and name.
func (s redisSourceNamespaceLister) Get(name string) (*v1alpha1.RedisSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("redissource"), name)
	}
	return obj.(*v1alpha1.RedisSource), nil
}
