syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.spaceuptech.space_api.proto";
option java_outer_classname = "SpaceCloudProto";

package proto;

message CreateRequest {
  bytes document = 1;
  string operation = 2;
  Meta meta = 3;
}
message ReadRequest {
  bytes find = 1;
  string operation = 2;
  ReadOptions options = 3;
  Meta meta = 4;
}
message ReadOptions {
  map<string,int32> select = 1;
  map<string,int32> sort = 2;
  int64 skip = 3;
  int64 limit = 4;
  string distinct = 5;
}
message UpdateRequest {
  bytes find = 1;
  string operation = 2;
  bytes update = 3;
  Meta meta = 4;
}
message DeleteRequest {
  bytes find = 1;
  string operation = 2;
  Meta meta = 3;
}
message AggregateRequest {
  bytes pipeline = 1;
  string operation = 2;
  Meta meta = 3;
}
message Response {
  int32 status = 1;
  string error = 2;
  bytes result = 3;
}
message Meta {
  string project = 1;
  string dbType = 2;
  string col = 3;
  string token = 4;
}
message AllRequest {
  string col = 1;
  bytes document = 2;
  string operation = 3;
  bytes find = 4;
  bytes update = 5;
  string type = 6;
}
message BatchRequest {
  repeated AllRequest batchrequest = 1;
  Meta meta = 2;
}

message FunctionsRequest {
  bytes params = 1;
  int64 timeout = 2;
  string engine = 3;
  string function = 4;
  string token = 5;
}

message FeedData {
  string queryId = 1;
  string docId = 2;
  string type = 3;
  string group = 4;
  string dbType = 5;
  bytes payload = 6;
  int64 timeStamp = 7;
}

message RealTimeRequest {
  string token = 1;
  string dbType = 2;
  string project = 3;
  string group = 4;
  string type = 5;
  string id = 6;
  bytes where = 7;
}

message RealTimeResponse {
  string group = 1;
  string id = 2;
  bool ack = 3;
  string error = 4;
  repeated FeedData feedData = 5;
}
service SpaceCloud {
  rpc Create(CreateRequest) returns (Response) {}
  rpc Read(ReadRequest) returns (Response) {}
  rpc Update(UpdateRequest) returns (Response) {}
  rpc Delete(DeleteRequest) returns (Response) {}
  rpc Aggregate(AggregateRequest) returns (Response) {}
  rpc Batch(BatchRequest) returns (Response) {}
  
  rpc Call(FunctionsRequest) returns (Response) {}
  rpc RealTime (stream RealTimeRequest) returns (stream RealTimeResponse) {}
}
